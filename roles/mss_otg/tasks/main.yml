---
# 1. check if vm init was done
- name: check if vm init was done
  stat:
    path: "/var/lib/mss_ansible/mss-otg_vm_init"
  register: vm_init

# 2. we are in the vm, clone the repo
- name: vm pre-install
  block:
    - name: set project path
      set_fact:
        project_path: "/tmp/mss-otg"

    - name: clone project
      git:
        repo: "https://github.com/gottaeat/mss-otg"
        dest: "{{ project_path }}"
        depth: 1
        recursive: true
  when: in_vm and not vm_init.stat.exists

# 3. we are on baremetal
- name: baremetal pre-install
  block:
    - name: set project_path
      set_fact:
        project_path: "/mnt/mss/stuff/techy-bits/git/mss-otg"

    - name: read the hash of the installed mss-otg
      block:
        - name: slurp the project commit file
          slurp:
            src: "/var/lib/mss_ansible/mss-otg_commit"
          register: commit_hash_b64

        - name: decode the hash
          set_fact:
            installed_hash: "{{ commit_hash_b64['content'] | b64decode }}"
  when: not in_vm

# 4. read the HEAD commit hash
- name: read the hash of the head
  shell:
    chdir: "{{ project_path }}"
    cmd: |
       git rev-parse --short HEAD
  register: head_hash
  changed_when: false
  when: not in_vm or not vm_init.stat.exists

# 5. install when:
#  a. we are in the vm and we never installed mss-otg
#  b. we are on baremetal and the installed hash does not match the HEAD
- name: build project
  block:
    - name: build and install project
      shell:
        chdir: "{{ project_path }}"
        cmd: |
          ./template.py --setboxes

    - name: update the hash
      copy:
        content: "{{ head_hash }}"
        dest: "/var/lib/mss_ansible/mss-otg_commit"

    - name: set vm_init
      file:
        path: "/var/lib/mss_ansible/mss-otg_vm_init"
        state: touch
        modification_time: preserve
        access_time: preserve
      when: not vm_init.stat.exists
  when: >-
    ( in_vm and not vm_init.stat.exists ) or
    ( not in_vm and installed_hash.stdout != head_hash.stdout )

# 6. setcake service for routers
- name: setcake.py service for routers
  block:
    - name: derive wan iface name
      set_fact:
        setcake_iface: "{{ 'ppp0' if ppp_wan else 'wan' }}"

    - name: copy over unit file
      copy:
        src: setcake@.service
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      register: setcake_unitfile_copy

    - name: daemon reload
      systemd_service:
        daemon_reload: true
      when: setcake_unitfile_copy.changed

    - name: set setcake state
      block:
        - name: enabled by default, if not in a vm
          systemd_service:
            name: "setcake@{{ setcake_iface }}.service"
            enabled: true
          when: in_vm

        - name: triggers, when on baremetal
          systemd_service:
            name: "setcake@{{ setcake_iface }}.service"
            state:
              "{{ \
                'restarted' if \
                  setcake_unitfile_copy.changed \
                else \
                  'started' \
              }}"
            enabled: true
          when: not in_vm
  when: "'routers' in group_names"
