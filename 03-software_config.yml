- name: install mss-otg utils + landfill
  hosts: crib
  become: yes
  tasks:
    # 1. check if we're on baremetal
    - name: check if mss_otg_path exists
      stat:
        path: "{{ mss_otg_path }}"
      register: otg_on_baremetal

    # 2. check if vm init was done
    - name: check if vm init was done
      stat:
        path: /var/lib/mss_ansible/otg_vm_init_done
      register: otg_vm_init

    # 3. we are in the vm, clone the repo
    - name: vm pre-install
      block:
        - name: set otg-path
          set_fact:
            otg_path: "/tmp/mss-otg"

        - name: clone mss-otg
          git:
            repo: "https://github.com/gottaeat/mss-otg"
            dest: "{{ otg_path }}"
            depth: 1
            recursive: yes
      when: not otg_on_baremetal.stat.exists and not otg_vm_init.stat.exists

    # 4. we are on baremetal
    - name: baremetal pre-install
      block:
        - name: set otg-path
          set_fact:
            otg_path: "{{ mss_otg_path }}"

        - name: read the hash of the installed otg
          block:
            - name: slurp the otg commit file
              slurp:
                src: /var/lib/mss_ansible/otg_commit
              register: otg_commit_hash_b64

            - name: decode the hash
              set_fact:
                installed_otg_hash: "{{ otg_commit_hash_b64['content'] | b64decode }}"
      when: otg_on_baremetal.stat.exists

    # 5. read the HEAD commit hash
    - name: read the hash of the head
      shell:
        chdir: "{{ otg_path }}"
        cmd: |
           git rev-parse --short HEAD
      register: head_otg_hash
      changed_when: false
      when: otg_on_baremetal.stat.exists or not otg_vm_init.stat.exists

    # 6. install when:
    #  a. we are in the vm and we never installed mss-otg
    #  b. we are on baremetal and the installed hash does not match the HEAD
    - name: build otg
      block:
        - name: create build directory
          file:
            path: "{{ otg_path }}/{{ item }}/build"
            state: directory
          with_items:
            - utils
            - landfill

        - name: build and install otg
          shell:
            chdir: "{{ otg_path }}/{{ item }}/build"
            cmd: |
              meson setup ../ && ninja && ninja install
          with_items:
            - utils
            - landfill

        - name: remove build artifacts
          file:
            path: "{{ otg_path }}/{{ item }}/build"
            state: absent
          with_items:
            - utils
            - landfill

        - name: update the hash
          copy:
            content: "{{ head_otg_hash }}"
            dest: /var/lib/mss_ansible/otg_commit

        - name: set otg_vm_init
          file:
            path: /var/lib/mss_ansible/otg_vm_init_done
            state: touch
            modification_time: preserve
            access_time: preserve
          when: not otg_vm_init.stat.exists
      when: (not otg_on_baremetal.stat.exists and not otg_vm_init.stat.exists ) or ( otg_on_baremetal.stat.exists and installed_otg_hash != head_otg_hash )

    # 7. post-install
    - name: set otg ownership
      file:
        path: "/mss/{{ item }}"
        owner: root
        group: root
        recurse: yes
      with_items:
        - "bin"
        - "etc"
        - "share"

    - name: install symlinks for the bash-handler
      file:
        src: "/mss/share/bash-handler"
        dest: "{{ item }}"
        state: link
        force: yes
      with_items:
        - "/etc/profile"
        - "/etc/bash.bashrc"

- name: configure nftables
  hosts: crib
  become: yes
  tasks:
    - name: copy nftables.conf to /etc
      copy:
        src: "./files/nftables/{{ mss_hostname }}.nft"
        dest: /etc/nftables.conf
        owner: root
        group: root
        mode: '0700'
      notify: restart nftables

    - name: mask iptables
      systemd_service:
        name: iptables
        masked: true

  handlers:
    - name: restart nftables
      systemd_service:
        name: nftables
        state: restarted
        enabled: true

- name: configure wireguard
  hosts: crib
  become: yes
  tasks:
    - name: create client symlinks for {{ mss_hostname }}
      file:
        src: "/mnt/mss/stuff/techy-bits/vpn/lichen/client/{{ mss_hostname }}-{{ item }}.conf"
        dest: "/etc/wireguard/{{ item }}.conf"
        state: link
        force: true
        follow: false
      with_items: "{{ mss_wireguard_ifaces }}"

- name: configure bind
  hosts: crib
  become: yes
  vars:
      ansible_ssh_common_args: "-t"
  roles:
    - role: ansible-resolv
      vars:
        resolv_nameservers:
          - "10.0.99.0"
        resolv_search:
          - "crib"
          - "lichen"
          - "lichenraw"
  pre_tasks:
    - name: copy over systemd overrides
      copy:
        src: ./dir/etc/systemd/system/named.service.d
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0640'
      register: named_systemd_override

    - name: daemon reload
      systemd_service:
        daemon_reload: true
      when: named_systemd_override.changed

    - name: base named configuration
      ansible.posix.synchronize:
        src: "./dir/etc/{{ item }}"
        dest: /etc
        archive: yes
        delete: false
        owner: false
        group: false
        times: false
        checksum: true
        rsync_opts:
            - "--chown=named:named"
            - "--chmod=F640"
      with_items:
        - named.conf
        - rndc.conf
      register: base_named_copy

    - name: zonefiles
      ansible.posix.synchronize:
        src: ./dir/var/named
        dest: /var
        archive: yes
        delete: true
        owner: false
        group: false
        times: false
        checksum: true
        rsync_opts:
            - "--chown=named:named"
            - "--chmod=D750,F640"
      register: zone_named_copy

    - name: generate /etc/rndc.key
      command:
        cmd: rndc-confgen -a -c /etc/rndc.key
        creates: /etc/rndc.key

    - name: set perms for rndc.key
      file:
        path: /etc/rndc.key
        owner: root
        group: named
        mode: '0640'

    - name: set named state
      systemd_service:
        name: named
        state: "{{ 'restarted' if named_systemd_override.changed or base_named_copy.changed or zone_named_copy.changed else 'started' }}"
        enabled: true
