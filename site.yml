---
# - - update init - - #
- name: call initialization tasks in case what is handled there has changed
  hosts: crib
  become: true
  vars_files:
    -  "{{ vaultdir }}/setboxes/pass.yml"
  roles:
    - role: initialize

# - - baseline system - - #
- name: libc configuration
  hosts: crib
  become: true
  tasks:
    - name: set hostname
      hostname:
        name: "{{ mss_hostname }}"
        use: systemd

    - name: set /etc/hosts
      copy:
        content: |
          127.0.0.1 localhost.localdomain localhost
          127.0.1.1 {{ mss_hostname }} {{ mss_hostname }}
        dest: "/etc/hosts"
        owner: root
        group: root
        mode: '0644'

    - name: set locale
      block:
        - name: set locale.gen
          community.general.locale_gen:
           name: en_US.UTF-8
           state: present

        - name: set locale.conf
          copy:
            content: |
              LANG=en_US.UTF-8
            dest: "/etc/locale.conf"
            owner: root
            group: root
            mode: '0644'

    - name: set timezone
      community.general.timezone:
        name: Europe/Istanbul

    - name: set mountpoints
      block:
        - name: create mountpoints
          file:
            path: "/mnt/mss/{{ item }}"
            state: directory
            recurse: false
          with_items:
            - archive
            - externalstuff
            - iso
            - stuff
            - usb

        - name: set fstab
          copy:
            content: |
              /dev/arch/rootfs / ext4 defaults,noatime 0 1
              /dev/arch/stuff /mnt/mss/stuff ext4 rw,relatime,noatime,data=ordered 0 2
              /mnt/mss/stuff/techy-bits/home /home/mss auto defaults,nofail,nobootwait,bind 0 0
              /mnt/mss/stuff/techy-bits/swapfile none swap sw 0 0
              {{ mss_fstab_extra }}
            dest: "/etc/fstab"
            owner: root
            group: root
            mode: '0644'

- name: pacman and mkinitcpio configuration
  hosts: crib
  become: true
  tasks:
    - name: copy over vconsole.conf
      copy:
        src: ./dir/etc/vconsole.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'

    - name: copy over the pacman config files
      copy:
        src: "./dir/etc/{{ item }}"
        dest: /etc
        owner: root
        group: root
        mode: '0644'
      with_items:
        - pacman.conf
        - makepkg.conf

    - name: copy over mkinitcpio config file
      copy:
        src: ./dir/etc/mkinitcpio.conf
        dest: /etc/
        owner: root
        group: root
        mode: '0644'
      notify: initramfs rebuild

    - name: set pacman mirrors
      copy:
        content: |
          Server = https://geo.mirror.pkgbuild.com/$repo/os/$arch
          Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch
          Server = https://mirror.leaseweb.net/archlinux/$repo/os/$arch
        dest: /etc/pacman.d/mirrorlist
        owner: root
        group: root
        mode: '0644'

    - name: check if mss-otg sourceme-build exists
      stat:
        path: /mss/etc/sourceme-build
      register: sourceme_build_state

    - name: one-off mss-otg sourceme-build
      block:
        - name: create paths
          file:
            path: /mss/etc
            state: directory
            recurse: true

        - name: download one-off sourceme-build
          get_url:
            url: 'https://raw.githubusercontent.com/gottaeat/mss-otg/master/utils/etc/sourceme-build'
            dest: /mss/etc/sourceme-build
            owner: root
            group: root
            mode: '0644'
      when: not sourceme_build_state.stat.exists
  handlers:
    - name: initramfs rebuild
      shell:
        cmd: |
          mkinitcpio -P
      when: not in_vm

- name: handle packages
  hosts: crib
  become: true
  vars_files:
    - files/pkglist/main.yml
    - files/pkglist/user.yml
  vars:
    pkgs: "{{ ( main_pkgs_base + user_pkgs_base + main_pkgs_extra \
      + user_pkgs_extra )}}"
    desktop_pkgs: "{{ (  main_pkgs_multimedia + main_pkgs_desktop_extra \
      + main_pkgs_wlan_tools + user_pkgs_multimedia ) }}"
  tasks:
    - name: resolve package list
      block:
        - name: handle desktops group
          set_fact:
            pkgs: "{{ (pkgs + desktop_pkgs ) }}"
          when: "'desktops' in group_names"

        - name: handle routers group
          set_fact:
            pkgs: "{{ (pkgs + main_pkgs_router) }}"
          when: "'routers' in group_names"

        - name: handle bios group
          set_fact:
            pkgs: "{{ (pkgs + main_pkgs_bios)}}"
          when: "'bios' in group_names"

    - name: create aur user
      user:
        name: aur
        group: wheel
        append: false
        create_home: true
        skeleton: /dev/null
        expires: -1
        state: present

    - name: allow aur to run pacman as root w/o a password
      copy:
        content: |
          aur ALL=(ALL) NOPASSWD: /usr/bin/pacman
        dest: /etc/sudoers.d/aur
        owner: root
        group: root
        mode: '0400'

    - name: check if yay is installed
      stat:
        path: /usr/bin/yay
      register: yay_installed

    - name: build yay
      become_user: aur
      block:
        - name: install yay build deps
          become_user: root
          community.general.pacman:
            name:
              - git
              - go
              - base-devel
            update_cache: true
            state: present
            extra_args: "--ask 4"

        - name: clone repo
          git:
            repo: "https://aur.archlinux.org/yay.git"
            dest: /tmp/yay
            depth: 1
            recursive: true

        - name: build and install yay
          shell:
            chdir: /tmp/yay
            cmd: |
                makepkg -sri --noconfirm
      when: not yay_installed.stat.exists

    - name: install aur packages
      become_user: aur
      block:
        - name: update and upgrade
          kewlfft.aur.aur:
            use: yay
            aur_only: false
            update_cache: true
            upgrade: true
            extra_args: "--ask 4"

        - name: install the packages
          kewlfft.aur.aur:
            name: "{{ pkgs }}"
            use: yay
            aur_only: false
            extra_args: "--ask 4 --asexplicit"
          notify: cleanup pacman

    - name: remove grub residue left over from bootstrap image on EFI hosts
      block:
        - name: remove the grub package
          community.general.pacman:
            name: grub
            state: absent
            extra_args: "--ask 4"
          notify: cleanup pacman

        - name: remove grub residue in the boot partition
          file:
            path: "/boot/{{ item }}"
            state: absent
          with_items:
            - EFI
            - grub
      when: "'bios' not in group_names"

    - name: handle groups
      block:
        - name: add user mss to group adbusers
          user:
            name: mss
            groups: adbusers
            append: true
          when: '"android-tools" in pkgs'

        - name: add user mss to group wireshark
          user:
            name: mss
            groups: wireshark
            append: true
          when: '"wireshark-qt" in pkgs'

  handlers:
    - name: cleanup pacman
      become_user: aur
      shell: |
        rm -rf /home/aur/.cache; \
        yay -Scc --noconfirm; \
        sudo pacman -Qtdq | sudo pacman -Rns - --noconfirm; \
        sudo pacman -Qqd | sudo pacman -Rsu - --noconfirm
      ignore_errors: true
      changed_when: false

- name: udev configuration
  hosts: crib
  become: true
  tasks:
    - name: copy over the rules
      copy:
        src: ./dir/etc/udev/rules.d/
        dest: /etc/udev/rules.d
        owner: root
        group: root
        mode: '0644'
      notify: reload udev rules

  handlers:
    - name: reload udev rules
      shell: |
        udevadm control --reload-rules && \
        udevadm trigger

- name: modprobe blacklist configuraiton
  hosts: crib
  become: true
  tasks:
    - name: blacklist ipv6
      community.general.kernel_blacklist:
        name: ipv6
        state: present

- name: modules-load.d configuration
  hosts: routers
  become: true
  tasks:
    - name: handle ppp
      modprobe:
        name: ppp_generic
        persistent: present
        state: present
      when: ppp_wan

- name: sysctl configuration
  hosts: crib
  become: true
  tasks:
    - name: set ipv4
      ansible.posix.sysctl:
        name: "{{ item['name'] }}"
        value: "{{ item['value'] }}"
        sysctl_file: /etc/sysctl.d/01-ipv4.conf
        sysctl_set: true
        reload: true
        state: present
      with_items:
        - { name: "net.ipv4.icmp_echo_ignore_broadcasts", value: 1 }
        - { name: "net.ipv4.conf.all.accept_source_route", value: 0 }
        - { name: "net.ipv4.conf.default.accept_source_route", value: 0 }
        - { name: "net.ipv4.tcp_syncookies", value: 1 }
        - { name: "net.ipv4.conf.default.accept_redirects", value: 0 }
        - { name: "net.ipv4.conf.all.send_redirects", value: 0 }
        - { name: "net.ipv4.conf.default.send_redirects", value: 0 }
        - { name: "net.ipv4.conf.all.rp_filter", value: 1 }
        - { name: "net.ipv4.conf.default.rp_filter", value: 1 }
        - { name: "net.ipv4.conf.all.log_martians", value: 1 }
        - { name: "net.ipv4.conf.default.log_martians", value: 1 }
        - { name: "net.ipv4.ip_dynaddr", value: 2 }
        - { name: "net.ipv4.tcp_ecn", value: 0 }
        - { name: "net.ipv4.ip_forward", value: 1 }

    - name: check ipv6 presence
      stat:
        path: /proc/sys/net/ipv6
      register: ipv6_exists

    - name: set ipv6
      ansible.posix.sysctl:
        name: "{{ item['name'] }}"
        value: "{{ item['value'] }}"
        sysctl_file: /etc/sysctl.d/02-ipv6.conf
        sysctl_set: "{{ 'true' if ipv6_exists.stat.exists else 'false' }}"
        reload: "{{ 'true' if ipv6_exists.stat.exists else 'false' }}"
        state: present
      with_items:
        - { name: "net.ipv6.conf.all.disable_ipv6", value: 1 }
        - { name: "net.ipv6.conf.default.disable_ipv6", value: 1 }

    - name: enable sysrq
      ansible.posix.sysctl:
        name: kernel.sysrq
        value: '1'
        sysctl_file: /usr/lib/sysctl.d/50-default.conf
        reload: false

- name: configure vim
  hosts: crib
  become: true
  vars:
    dir: [ ['/root', 'root'], ['/home/mss', 'mss'] ]
    subdir: [ 'backups', 'swaps' ]
  tasks:
    - name: copy over vim configuration
      copy:
        src: ./dir/etc/vimrc
        dest: /etc
        owner: root
        group: root
        mode: '0644'

    - name: create directories
      file:
        path: "{{ item.0.0 }}/.config/vim/{{ item.1 }}"
        owner: "{{ item.0.1 }}"
        group: "{{ item.0.1 }}"
        state: directory
      loop: "{{ dir | product(subdir) | list }}"

    - name: symlink vi to vim
      file:
        src: "/usr/bin/vim"
        dest: "/usr/bin/vi"
        state: link
        force: true

- name: configure x11
  hosts: desktops
  become: true
  tasks:
    - name: allow x11 to run as root
      copy:
        src: ./dir/etc/X11/Xwrapper.config
        dest: /etc/X11
        owner: root
        group: root
        mode: '0644'

    - name: copy xorg-server config for host
      copy:
        src: "./dir/etc/X11/xorg.conf.d/01-{{ mss_hostname }}.conf"
        dest: /etc/X11/xorg.conf.d
        owner: root
        group: root
        mode: '0644'

# - - mss wares - - #
- name: build mss-nfqws
  hosts: crib
  become: true
  roles:
    - role: handle_meson
      vars:
        project_url: "https://github.com/gottaeat/mss-nfqws"
        project_name: "mss-nfqws"
        baremetal_path: "/mnt/mss/stuff/techy-bits/git/mss-nfqws"
        build_dir: "build"

- name: build utils
  hosts: crib
  become: true
  roles:
    - role: handle_meson
      vars:
        project_url: "https://github.com/gottaeat/mss-otg"
        project_name: "otg-utils"
        baremetal_path: "/mnt/mss/stuff/techy-bits/git/mss-otg"
        build_dir: "utils/build"
  tasks:
    - name: set otg ownership
      file:
        path: "/mss/{{ item }}"
        owner: root
        group: root
        recurse: true
      with_items:
        - "bin"
        - "etc"
        - "share"

    - name: install symlinks for the bash-handler
      file:
        src: "/mss/share/bash-handler"
        dest: "{{ item }}"
        state: link
        force: true
      with_items:
        - "/etc/profile"
        - "/etc/bash.bashrc"

    - name: install symlinks for aliases
      block:
        - name: /mss/repo
          file:
            src: "/mnt/mss/stuff/techy-bits/git/setboxes"
            dest: "/mss/repo"
            state: link
            force: true

        - name: /mss/work
          file:
            src: "/mnt/mss/stuff/techy-bits/work"
            dest: "/mss/work"
            state: link
            force: true

- name: build landfill
  hosts: desktops
  become: true
  roles:
    - role: handle_meson
      vars:
        project_url: "https://github.com/gottaeat/mss-otg"
        project_name: "otg-landfill"
        baremetal_path: "/mnt/mss/stuff/techy-bits/git/mss-otg"
        build_dir: "landfill/build"

# - - services - - #
- name: configure systemd-networkd
  hosts: crib
  become: true
  vars_files:
    - "{{ vaultdir }}/setboxes/router.yml"
  tasks:
    - name: get rid of bootstrap networking
      file:
        path: "/etc/systemd/network/80-dhcp.network"
        state: absent

    - name: configure lo network
      copy:
        src: ./dir/etc/systemd/network/lo.network
        dest: "/etc/systemd/network/lo.network"
        owner: root
        group: root
        mode: '0644'
      register: lo_net_copy

    - name: router specific networkd configuration
      block:
        # - - vlans - - #
        - name: configure crib vlan
          copy:
            src: ./dir/etc/systemd/network/01-crib.netdev
            dest: "/etc/systemd/network/01-crib.netdev"
            owner: root
            group: root
            mode: '0644'
          register: crib_netdev_copy

        - name: configure guest vlan
          copy:
            src: ./dir/etc/systemd/network/03-guest.netdev
            dest: "/etc/systemd/network/03-guest.netdev"
            owner: root
            group: root
            mode: '0644'
          register: guest_netdev_copy

        - name: configure wan vlan
          template:
            src: ./dir/etc/systemd/network/02-wan.netdev.j2
            dest: "/etc/systemd/network/02-wan.netdev"
            owner: root
            group: root
            mode: '0644'
          register: wan_netdev_copy

        # - - physical - - #
        - name: configure cloaca link
          template:
            src: ./dir/etc/systemd/network/04-cloaca.link.j2
            dest: "/etc/systemd/network/04-cloaca.link"
            owner: root
            group: root
            mode: '0644'
          register: cloaca_link_copy

        # - - networks - - #
        - name: configure cloaca network
          copy:
            src: ./dir/etc/systemd/network/cloaca.network
            dest: "/etc/systemd/network/cloaca.network"
            owner: root
            group: root
            mode: '0644'
          register: cloaca_network_copy

        - name: configure crib network
          template:
            src: ./dir/etc/systemd/network/crib.network.j2
            dest: "/etc/systemd/network/crib.network"
            owner: root
            group: root
            mode: '0644'
          register: crib_network_copy

        - name: configure guest network
          copy:
            src: ./dir/etc/systemd/network/guest.network
            dest: "/etc/systemd/network/guest.network"
            owner: root
            group: root
            mode: '0644'
          register: guest_network_copy

        - name: configure wan.network
          template:
            src: ./dir/etc/systemd/network/wan.network.j2
            dest: "/etc/systemd/network/wan.network"
            owner: root
            group: root
            mode: '0644'
          register: wan_network_copy
      when: "'routers' in group_names"

    - name: set systemd-networkd state
      block:
        - name: enabled by default, if not in a vm
          systemd_service:
            name: systemd-networkd
            enabled: true
          when: in_vm

        - name: triggers, when on baremetal (desktops)
          systemd_service:
            name: systemd-networkd
            state: "{{ 'restarted' if lo_net_copy.changed else 'started' }}"
            enabled: true
          when: "'desktops' in group_names and not in_vm"

        - name: triggers, when on baremetal (routers)
          systemd_service:
            name: systemd-networkd
            state:
              "{{ \
                'restarted' if \
                  lo_net_copy.changed or \
                  crib_netdev_copy.changed or \
                  guest_netdev_copy.changed or \
                  wan_netdev_copy.changed or \
                  cloaca_link_copy.changed or \
                  cloaca_network_copy.changed or \
                  crib_network_copy.changed or \
                  guest_network_copy.changed or \
                  wan_network_copy.changed \
                else \
                  'started' \
              }}"
            enabled: true
          when: "'routers' in group_names and not in_vm"

- name: configure wireguard
  hosts: crib
  become: true
  tasks:
    - name: create client symlinks for {{ mss_hostname }}
      file:
        src: "/mnt/mss/stuff/techy-bits/vpn/lichen/client/{{ mss_hostname }}-{{ item }}.conf"
        dest: "/etc/wireguard/{{ item }}.conf"
        state: link
        force: true
        follow: false
      with_items: "{{ mss_wireguard_ifaces }}"
      register: wg_config_link

- name: configure network namespace for vlans
  hosts: routers
  become: true
  roles:
    - role: make_vlan_netns
      vars:
        netns_name: guest
    - role: make_vlan_netns
      vars:
        netns_name: crib
  pre_tasks:
    - name: install dnsmasq_netns unit file
      copy:
        src: ./dir/etc/systemd/system/dnsmasq_netns@.service
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: '0644'
      register: dnsmasq_netns_unitfile_copy

    - name: install wg-quick-lan_crib unit file
      copy:
        src: ./dir/etc/systemd/system/wg-quick-lan_crib@.service
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: '0644'
      register: wg_quick_lan_crib_unitfile_copy

    - name: daemon reload
      systemd_service:
        daemon_reload: true
      when: >-
        (
          dnsmasq_netns_unitfile_copy.changed or
          wg_quick_lan_crib_unitfile_copy.changed
        )
  tasks:
    - name: configure wireguard instances for lan_crib netns
      block:
        - name: enabled by default, if in a vm
          systemd_service:
            name: "wg-quick-lan_crib@{{ item }}"
            enabled: true
          with_items: "{{ mss_wireguard_ifaces }}"
          when: in_vm

        - name: triggers, when on baremetal
          systemd_service:
            name: "wg-quick-lan_crib@{{ item }}"
            state:
              "{{ \
                'restarted' if \
                  wg_config_link.changed or \
                  wg_quick_lan_crib_unitfile_copy.changed \
                else \
                  'started' \
              }}"
            enabled: true
          with_items: "{{ mss_wireguard_ifaces }}"
          when: not in_vm

- name: configure networkmanager
  hosts: desktops
  become: true
  tasks:
    - name: copy over networkmanager configuration
      copy:
        src: ./dir/etc/NetworkManager/conf.d/
        dest: /etc/NetworkManager/conf.d/
        owner: root
        group: root
        mode: '0644'
      register: nm_config_copy

    - name: set networkmanager state
      block:
        - name: enabled by default, if not in a vm
          systemd_service:
            name: NetworkManager
            enabled: true
          when: in_vm

        - name: triggers, when on baremetal
          systemd_service:
            name: NetworkManager
            state: "{{ 'reloaded' if nm_config_copy.changed else 'started' }}"
            enabled: true
          when: not in_vm

- name: configure pppd
  hosts: routers
  become: true
  vars_files:
    - "{{ vaultdir }}/setboxes/router.yml"
  tasks:
    - name: configure pppd
      block:
        - name: template and copy over pap-secrets
          template:
            src: ./dir/etc/ppp/pap-secrets.j2
            dest: /etc/ppp/pap-secrets
            owner: root
            group: root
            mode: '0600'
          register: secret_copy

        - name: template and copy over isp peer config
          template:
            src: ./dir/etc/ppp/peers/isp.j2
            dest: /etc/ppp/peers/isp
            owner: root
            group: root
            mode: '0644'
          register: isp_copy

        - name: copy over options
          copy:
            src: ./dir/etc/ppp/options
            dest: /etc/ppp
            owner: root
            group: root
            mode: '0644'
          register: ppp_opts_copy

        - name: copy over mss-ppp systemd service
          copy:
            src: "./dir/etc/systemd/system/mss-ppp.service"
            dest: /etc/systemd/system
            owner: root
            group: root
            mode: '0644'
          register: pppsystemd_copy

        - name: set pppd state
          block:
            - name: enabled by default
              systemd_service:
                name: mss-ppp
                enabled: true

            - name: triggers
              systemd_service:
                name: mss-ppp
                state:
                  "{{ \
                    'restarted' if \
                      secret_copy.changed or \
                      isp_copy.changed or \
                      ppp_opts_copy.changed or \
                      pppsystemd_copy.changed \
                    else \
                      'started' \
                  }}"
                enabled: true
              when: not in_vm
      when: ppp_wan

- name: configure systemd-logind
  hosts: crib
  become: true
  tasks:
    - name: copy over logind config
      copy:
        src: ./dir/etc/systemd/logind.conf
        dest: /etc/systemd
        owner: root
        group: root
        mode: '0644'
      notify: restart logind

  handlers:
    - name: restart logind
      systemd_service:
        name: systemd-logind
        state: restarted
        enabled: true

- name: configure nftables
  hosts: crib
  become: true
  tasks:
    - name: copy nftables.conf to /etc
      template:
        src: >-
          {{ './files/nftables/' + mss_hostname +
          ('.nft.j2' if 'routers' in group_names else '.nft') }}
        dest: /etc/nftables.conf
        owner: root
        group: root
        mode: '0700'
      register: nftables_copy

    - name: mask iptables
      systemd_service:
        name: iptables
        masked: true

    - name: set nftables state
      block:
        - name: enabled by default, if not in a vm
          systemd_service:
            name: nftables
            enabled: true
          when: in_vm

        - name: triggers, when on baremetal
          systemd_service:
            name: nftables
            state: "{{ 'restarted' if nftables_copy.changed else 'started' }}"
            enabled: true
          when: not in_vm
          changed_when: false

- name: configure bind
  hosts: crib
  become: true
  tasks:
    - name: copy over systemd overrides
      copy:
        src: ./dir/etc/systemd/system/named.service.d
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0640'
      register: named_systemd_override

    - name: daemon reload
      systemd_service:
        daemon_reload: true
      when: named_systemd_override.changed

    - name: base named configuration
      template:
        src: "./dir/etc/{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: named
        group: named
        mode: '0640'
      with_items:
        - { src: named.conf.j2, dest: /etc/named.conf }
        - { src: rndc.conf, dest: /etc/rndc.conf }
      register: base_named_copy

    - name: zonefiles
      ansible.posix.synchronize:
        src: ./dir/var/named
        dest: /var
        archive: true
        delete: true
        owner: false
        group: false
        times: false
        checksum: true
        rsync_opts:
          - "--chown=named:named"
          - "--chmod=D750,F640"
          - "--exclude=extra.conf"
      register: zone_named_copy

    - name: extra config
      copy:
        src: "{{ vaultdir }}/setboxes/dir/var/named/extra.conf"
        dest: /var/named
        owner: named
        group: named
        mode: '0640'
      register: extra_conf_copy

    - name: generate /etc/rndc.key
      command:
        cmd: rndc-confgen -a -c /etc/rndc.key
        creates: /etc/rndc.key

    - name: set perms for rndc.key
      file:
        path: /etc/rndc.key
        owner: root
        group: named
        mode: '0644'

    - name: set named state
      block:
        - name: enabled by default
          systemd_service:
            name: named
            enabled: true

        - name: triggers
          systemd_service:
            name: named
            state:
              "{{ \
                'restarted' if \
                  named_systemd_override.changed or \
                  base_named_copy.changed or \
                  zone_named_copy.changed or \
                  extra_conf_copy.changed \
                else \
                  'started' \
              }}"
            enabled: true

    - name: set /etc/resolv.conf
      copy:
        content: |
          search crib guest lichen lichenraw
          nameserver 10.0.99.0
        dest: "/etc/resolv.conf"
        owner: root
        group: root
        mode: '0644'

    - name: mask systemd-resolved
      systemd_service:
        name: systemd-resolved
        enabled: false
        masked: true

- name: configure docker
  hosts: crib
  become: true
  tasks:
    - name: configure docker
      block:
        - name: copy over dockerns service
          copy:
            src: ./dir/etc/systemd/system/dockerns.service
            dest: /etc/systemd/system
            owner: root
            group: root
            mode: '0644'
          register: dockerns_copy

        - name: copy over docker overrides
          copy:
            src: ./dir/etc/systemd/system/docker.service.d
            dest: /etc/systemd/system
            owner: root
            group: root
            mode: '0644'
          register: docker_systemd_override

        - name: modify docker and containerd LimitNOFILE
          replace:
            path: "/usr/lib/systemd/system/{{ item }}.service"
            regexp: 'LimitNOFILE=infinity'
            replace: 'LimitNOFILE=1024:524288'
          with_items:
            - containerd
            - docker
          register: docker_systemd_file_replace

        - name: handle docker changes
          block:
            - name: daemon reload
              systemd_service:
                daemon_reload: true

            - name: stop all in order
              systemd_service:
                name: "{{ item }}"
                state: stopped
                enabled: true
              with_items:
                - docker.service
                - docker.socket
                - containerd.service
                - dockerns.service
          when: >-
            (
              dockerns_copy.changed or 
              docker_systemd_override.changed or
              docker_systemd_file_replace.changed
            )

        # dockerns is a dep of docker<-containerd, running docker automatically
        # runs dockerns.
        - name: set docker state
          systemd_service:
            name: docker
            state: started
            enabled: true

        - name: add user mss to group docker
          user:
            name: mss
            groups: docker
            append: true
      when: '"docker" in pkgs'

- name: configure libvirt
  hosts: crib
  become: true
  tasks:
    - name: configure libvirt
      block:
        - name: set up libvirt service
          block:
            - name: copy over libvirtdns service
              copy:
                src: ./dir/etc/systemd/system/libvirtdns.service
                dest: /etc/systemd/system
                owner: root
                group: root
                mode: '0644'
              register: libvirtdns_copy

            - name: copy over libvirtd overrides
              copy:
                src: ./dir/etc/systemd/system/libvirtd.service.d
                dest: /etc/systemd/system
                owner: root
                group: root
                mode: '0644'
              register: libvirtd_systemd_override

            - name: handle libvirt changes
              block:
                - name: daemon reload
                  systemd_service:
                    daemon_reload: true

                - name: stop all in order
                  systemd_service:
                    name: "{{ item }}"
                    state: stopped
                    enabled: true
                  with_items:
                    - libvirtd.service
                    - virtlogd.service
                    - libvirtd-admin.socket
                    - libvirtd-ro.socket
                    - libvirtd.socket
                    - virtlockd.socket
                    - virtlogd.socket
              when: >-
                (
                  libvirtd_systemd_override.changed or
                  libvirtdns_copy.changed
                )

        - name: set libvirt state
          block:
            # set to never change because this kicks off other components and
            # goes inactive, we care for failure, not change in this case.
            - name: set libvirtd
              systemd_service:
                name: libvirtd
                state: started
                enabled: true
              changed_when: false

            - name: set virtlogd
              systemd_service:
                name: virtlogd
                state: started
                enabled: false
              changed_when: false

        - name: add user mss to group libvirt
          user:
            name: mss
            groups: libvirt
            append: true

        - name: set up boxes
          block:
            - name: define networks
              community.libvirt.virt_net:
                command: define
                name: "{{ item.name }}"
                xml: '{{ lookup("file", item.xml) }}'
              with_items:
                - { name: "gat", xml: "./files/virtxml/net_gat.xml" }
                - { name: "cumvirt", xml: "./files/virtxml/net_cumvirt.xml" }

            - name: define pools
              community.libvirt.virt_pool:
                command: define
                name: "{{ item.name }}"
                xml: '{{ lookup("file", item.xml) }}'
              with_items:
                - { name: "cumvirt", xml: "./files/virtxml/pool_cumvirt.xml" }
                - { name: "gat", xml: "./files/virtxml/pool_gat.xml" }
                - { name: "iso", xml: "./files/virtxml/pool_iso.xml" }

            - name: set status
              block:
                - name: activate networks
                  community.libvirt.virt_net:
                    state: active
                    name: "{{ item }}"
                  with_items:
                    - cumvirt
                    - gat

                - name: autostart networks
                  community.libvirt.virt_net:
                    autostart: true
                    name: "{{ item }}"
                  with_items:
                    - cumvirt
                    - gat

                - name: activate pools
                  community.libvirt.virt_pool:
                    state: active
                    name: "{{ item }}"
                  with_items:
                    - cumvirt
                    - gat
                    - iso

                - name: autostart networks
                  community.libvirt.virt_pool:
                    autostart: true
                    name: "{{ item }}"
                  with_items:
                    - cumvirt
                    - gat
                    - iso

                - name: define domains
                  community.libvirt.virt:
                    command: define
                    autostart: false
                    xml: '{{ lookup("file", item) }}'
                  with_items:
                    - virtxml/dom_win10-ltsc-21h2.xml
                  changed_when: false
              when: not in_vm
      when: "'libvirt' in pkgs"

- name: configure pulseaudio
  hosts: desktops
  become: true
  tasks:
    # need to take a reboot for this normally, but this file never changes and
    # it gets copied over when we're setting up in the vm, should not fuck
    # anything up
    - name: copy over dbus policy overrides
      copy:
        src: ./dir/usr/share/dbus-1/system.d/pulseaudio.conf
        dest: /usr/share/dbus-1/system.d/
        owner: root
        group: root
        mode: '0644'

    - name: configure user pulse
      block:
        - name: add pulseaudio groups
          group:
            name: "{{ item }}"
            state: present
          with_items:
            - pulse
            - pulse-access

        - name: add pulse user
          user:
            name: pulse
            group: pulse
            groups: audio
            append: false
            system: true
            create_home: true
            home: /var/run/pulse
            skeleton: /dev/null
            expires: -1
            state: present

    - name: copy over pulseaudio configuration
      copy:
        src: "./dir/etc/pulse/{{ item }}.conf"
        dest: /etc/pulse/
        owner: root
        group: root
        mode: '0644'
      with_items:
        - client
        - daemon
      register: pulseconf_copy

    - name: set pulseaudio to use the socket
      replace:
        path: "/etc/pulse/{{ item }}.pa"
        regexp: "^load-module module-native-protocol-unix$"
        replace: "load-module module-native-protocol-unix auth-anonymous=1 socket=/var/run/pulse/native"
      with_items:
        - default
        - system
      register: pulsepa_modify

    - name: copy over pulseaudio systemd service
      copy:
        src: "./dir/etc/systemd/system/pulseaudio.service"
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      register: pulsesystemd_copy

    - name: add user mss to group pulse-access
      user:
        name: mss
        groups: pulse-access
        append: true

    - name: set pulseaudio state
      systemd_service:
        name: pulseaudio
        state:
          "{{ \
            'restarted' if \
              pulseconf_copy.changed or \
              pulsepa_modify.changed or \
              pulsesystemd_copy.changed \
            else \
              'started' \
          }}"
        enabled: true

- name: configure mpd
  hosts: desktops
  become: true
  tasks:
    - name: copy over mpd config
      copy:
        src: ./dir/etc/mpd.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'
      register: mpd_copy

    - name: mask mpd.socket
      systemd_service:
        name: mpd.socket
        enabled: false
        masked: true

    - name: set mpd state
      systemd_service:
        name: mpd
        state: "{{ 'restarted' if mpd_copy.changed else 'started' }}"
        enabled: true

    - name: generate mpd database and runtime options
      block:
        - name: check if mpd init was done
          stat:
            path: /var/lib/mss_ansible/mpd_init
          register: mpd_init

        - name: do mpd init
          block:
            - name: call mpc
              shell:
                cmd: |
                  mpc update && \
                  mpc random off && \
                  mpc repeat on && \
                  mpc single off && \
                  mpc consume off && \
                  mpc crossfade 3

            - name: set mpd_init
              file:
                path: "/var/lib/mss_ansible/mpd_init"
                state: touch
                modification_time: preserve
                access_time: preserve
          when: not mpd_init.stat.exists
      when: not in_vm

- name: configure ntpd
  hosts: crib
  become: true
  tasks:
    - name: copy over ntpd config
      copy:
        src: ./dir/etc/ntp.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'
      register: ntpd_copy

    - name: set ntpd state
      systemd_service:
        name: ntpd
        state: "{{ 'restarted' if ntpd_copy.changed else 'started' }}"
        enabled: true

- name: configure tor
  hosts: desktops
  become: true
  tasks:
    - name: copy over proxychains config
      copy:
        src: ./dir/etc/proxychains.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'

#    - name: set tor state
#      systemd_service:
#        name: tor
#        state: started
#        enabled: true

- name: configure acpid
  hosts: crib
  become: true
  tasks:
    - name: configure acpid
      block:
        - name: copy over the acpid handler script
          copy:
            src: ./dir/etc/acpi/handler.sh
            dest: /etc/acpi
            owner: root
            group: root
            mode: '0755'
          register: acpid_copy

        - name: set acpid state
          systemd_service:
            name: acpid
            state: "{{ 'restarted' if acpid_copy.changed else 'started' }}"
            enabled: true
      when: "'acpid' in pkgs"

- name: configure thinkfan
  hosts: crib
  become: true
  tasks:
    - name: configure thinkfans
      block:
        - name: generate thinkfan config
          script:
            cmd: ./files/gen_thinkfan_conf.py
            creates: /etc/thinkfan.conf
          register: thinkfan_conf_copy

        - name: set thinkfan state
          block:
            - name: enabled by default
              systemd_service:
                name: thinkfan
                enabled: true

            - name: triggers
              systemd_service:
                name: thinkfan
                state: "{{ 'restarted' if thinkfan_conf_copy.changed else 'started' }}"
                enabled: true
      when: "'thinkfan' in pkgs and not in_vm"

- name: bulk enable extra services
  hosts: crib
  become: true
  tasks:
    - name: bulk enable extra services
      systemd_service:
        name: "{{ item }}"
        state: started
        enabled: true
      with_items:
        - gpm
        - vnstat

    - name: enable but do not start module cleanup
      systemd_service:
        name: linux-modules-cleanup
        enabled: true

    - name: enable qbittorrent
      systemd_service:
        name: qbittorrent-nox@mss.service
        state: started
        enabled: true
      when: "'qbittorrent-nox' in pkgs"

# - - cleanup - - #
- name: cleanup
  hosts: crib
  become: true
  tasks:
    - name: flush logs
      shell:
        cmd: |
          journalctl --flush &&
          journalctl --rotate &&
          journalctl --vacuum-time=1s
      changed_when: false

    - name: trim
      shell:
        cmd: |
          fstrim -va
      changed_when: false
