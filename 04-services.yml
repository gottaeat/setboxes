- name: configure nftables
  hosts: crib
  become: yes
  tasks:
    - name: copy nftables.conf to /etc
      copy:
        src: "./files/nftables/{{ mss_hostname }}.nft"
        dest: /etc/nftables.conf
        owner: root
        group: root
        mode: '0700'
      notify: restart nftables

    - name: mask iptables
      systemd_service:
        name: iptables
        masked: true

  handlers:
    - name: restart nftables
      systemd_service:
        name: nftables
        state: restarted
        enabled: true

- name: configure wireguard
  hosts: crib
  become: yes
  tasks:
    - name: create client symlinks for {{ mss_hostname }}
      file:
        src: "/mnt/mss/stuff/techy-bits/vpn/lichen/client/{{ mss_hostname }}-{{ item }}.conf"
        dest: "/etc/wireguard/{{ item }}.conf"
        state: link
        force: true
        follow: false
      with_items: "{{ mss_wireguard_ifaces }}"

- name: configure bind
  hosts: crib
  become: yes
  roles:
    - role: ansible-resolv
      vars:
        resolv_nameservers:
          - "10.0.99.0"
        resolv_search:
          - "crib"
          - "lichen"
          - "lichenraw"
  pre_tasks:
    - name: copy over systemd overrides
      copy:
        src: ./dir/etc/systemd/system/named.service.d
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0640'
      register: named_systemd_override

    - name: daemon reload
      systemd_service:
        daemon_reload: true
      when: named_systemd_override.changed

    - name: base named configuration
      ansible.posix.synchronize:
        src: "./dir/etc/{{ item }}"
        dest: /etc
        archive: yes
        delete: false
        owner: false
        group: false
        times: false
        checksum: true
        rsync_opts:
            - "--chown=named:named"
            - "--chmod=F640"
      with_items:
        - named.conf
        - rndc.conf
      register: base_named_copy

    - name: zonefiles
      ansible.posix.synchronize:
        src: ./dir/var/named
        dest: /var
        archive: yes
        delete: true
        owner: false
        group: false
        times: false
        checksum: true
        rsync_opts:
            - "--chown=named:named"
            - "--chmod=D750,F640"
      register: zone_named_copy

    - name: generate /etc/rndc.key
      command:
        cmd: rndc-confgen -a -c /etc/rndc.key
        creates: /etc/rndc.key

    - name: set perms for rndc.key
      file:
        path: /etc/rndc.key
        owner: root
        group: named
        mode: '0640'

    - name: set named state
      systemd_service:
        name: named
        state: "{{ 'restarted' if named_systemd_override.changed or base_named_copy.changed or zone_named_copy.changed else 'started' }}"
        enabled: true

- name: configure docker
  hosts: crib
  become: yes
  tasks:
    - name: copy over dockerns service
      copy:
        src: ./dir/etc/systemd/system/dockerns.service
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      register: dockerns_copy

    - name: copy over docker overrides
      copy:
        src: ./dir/etc/systemd/system/docker.service.d
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      register: docker_systemd_override

    - name: modify docker and containerd LimitNOFILE
      replace:
        path: "/usr/lib/systemd/system/{{ item }}.service"
        regexp: 'LimitNOFILE=infinity'
        replace: 'LimitNOFILE=1024:524288'
      with_items:
        - containerd
        - docker
      register: docker_systemd_file_replace

    - name: daemon reload
      systemd_service:
        daemon_reload: true
      when: ( dockerns_copy.changed or docker_systemd_override.changed or docker_systemd_file_replace.changed )

    - name: set dockerns state
      systemd_service:
        name: dockerns
        state: "{{ 'restarted' if dockerns_copy.changed else 'started' }}"
        enabled: true
      register: dockerns_service_state
      when: dockerns_copy.changed

    - name: set docker state
      systemd_service:
        name: "{{ item }}"
        state: "{{ 'restarted' if docker_systemd_override.changed or docker_systemd_file_replace.changed else 'started' }}"
        enabled: true
      with_items:
        - docker
        - containerd

    - name: add user mss to group docker
      user:
        name: mss
        groups: docker
        append: yes

- name: configure libvirt
  hosts: crib
  become: yes
  tasks:
    - name: set up libvirt service
      block:
        - name: copy over libvirtdns service
          copy:
            src: ./dir/etc/systemd/system/libvirtdns.service
            dest: /etc/systemd/system
            owner: root
            group: root
            mode: '0644'
          register: libvirtdns_copy

        - name: copy over libvirtd overrides
          copy:
            src: ./dir/etc/systemd/system/libvirtd.service.d
            dest: /etc/systemd/system
            owner: root
            group: root
            mode: '0644'
          register: libvirtd_systemd_override

        - name: daemon reload
          systemd_service:
            daemon_reload: true
          when: ( libvirtdns_copy.changed or libvirtd_systemd_override.changed )

        - name: set libvirtdns state
          systemd_service:
            name: libvirtdns
            state: "{{ 'restarted' if libvirtdns_copy.changed else 'started' }}"
            enabled: true

        - name: set libvirt state
          systemd_service:
            name: "{{ item }}"
            state: "{{ 'restarted' if libvirtd_systemd_override.changed else 'started' }}"
            enabled: true
          with_items:
            - libvirtd
            - virtlogd

    - name: add user mss to group libvirt
      user:
        name: mss
        groups: libvirt
        append: yes

    - name: baremetal check
      stat:
        path: /mnt/mss/stuff/techy-bits/pools
      register: on_baremetal

    - name: set up boxes
      block:
        - name: define networks
          community.libvirt.virt_net:
            command: define
            name: "{{ item.name }}"
            xml: '{{ lookup("file", item.xml) }}'
          with_items:
            - { name: "gat", xml: "./virtxml/net_gat.xml" }
            - { name: "cumvirt", xml: "./virtxml/net_cumvirt.xml" }

        - name: define pools
          community.libvirt.virt_pool:
            command: define
            name: "{{ item.name }}"
            xml: '{{ lookup("file", item.xml) }}'
          with_items:
            - { name: "cumvirt", xml: "./virtxml/pool_cumvirt.xml" }
            - { name: "gat", xml: "./virtxml/pool_gat.xml" }
            - { name: "iso", xml: "./virtxml/pool_iso.xml" }

        - name: set network status
          community.libvirt.virt_net:
            autostart: true
            state: active
            name: "{{ item }}"
          with_items:
            - cumvirt
            - gat
          when: on_baremetal.stat.exists

        - name: set pool status
          community.libvirt.virt_pool:
            autostart: true
            state: active
            name: "{{ item }}"
          with_items:
            - cumvirt
            - gat
            - iso
          when: on_baremetal.stat.exists

        - name: define domains
          community.libvirt.virt:
            command: define
            autostart: false
            xml: '{{ lookup("file", item) }}'
          with_items:
            - virtxml/dom_win10-ltsc-21h2.xml
          when: on_baremetal.stat.exists

- name: configure pulseaudio
  hosts: crib
  become: yes
  tasks:
    # need to take a reboot for this normally, but this file never changes and
    # it gets copied over when we're setting up in the vm, should not fuck
    # anything up
    - name: copy over dbus policy overrides
      copy:
        src: ./dir/usr/share/dbus-1/system.d/pulseaudio.conf
        dest: /usr/share/dbus-1/system.d/
        owner: root
        group: root
        mode: '0644'

    - name: configure user pulse
      block:
        - name: add pulseaudio groups
          ansible.builtin.group:
            name: "{{ item }}"
            state: present
          with_items:
            - pulse
            - pulse-access

        - name: add pulse user
          ansible.builtin.user:
            name: pulse
            group: pulse
            groups: audio
            append: false
            system: true
            create_home: true
            home: /var/run/pulse
            skeleton: /dev/null
            expires: -1
            state: present

    - name: copy over pulseaudio configuration
      copy:
        src: "./dir/etc/pulse/{{ item }}.conf"
        dest: /etc/pulse/
        owner: root
        group: root
        mode: '0644'
      with_items:
        - client
        - daemon
      notify: restart pulseaudio

    - name: set pulseaudio to use the socket
      replace:
        path: "/etc/pulse/{{ item }}.pa"
        regexp: "^load-module module-native-protocol-unix$"
        replace: "load-module module-native-protocol-unix auth-anonymous=1 socket=/var/run/pulse/native"
      notify: restart pulseaudio
      with_items:
        - default
        - system

    - name: copy over pulseaudio systemd service
      copy:
        src: "./dir/etc/systemd/system/pulseaudio.service"
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      notify: restart pulseaudio

    - name: add user mss to group pulse-access
      user:
        name: mss
        groups: pulse-access
        append: yes

  handlers:
    - name: restart pulseaudio
      systemd_service:
        name: pulseaudio
        state: restarted
        enabled: true

- name: configure mpd
  hosts: crib
  become: yes
  tasks:
    - name: copy over mpd config
      copy:
        src: ./dir/etc/mpd.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'
      register: mpd_copy

    - name: mask mpd.socket
      systemd_service:
        name: mpd.socket
        enabled: false
        masked: true

    - name: set mpd state
      systemd_service:
        name: mpd
        state: "{{ 'restarted' if mpd_copy.changed else 'started' }}"
        enabled: true

- name: configure ntpd
  hosts: crib
  become: yes
  tasks:
    - name: copy over ntpd config
      copy:
        src: ./dir/etc/ntp.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'
      register: ntpd_copy

    - name: set ntpd state
      systemd_service:
        name: ntpd
        state: "{{ 'restarted' if ntpd_copy.changed else 'started' }}"
        enabled: true

- name: configure tor
  hosts: crib
  become: yes
  tasks:
    - name: copy over proxychains config
      copy:
        src: ./dir/etc/proxychains.conf
        dest: /etc
        owner: root
        group: root
        mode: '0644'

    - name: set tor state
      systemd_service:
        name: tor
        state: started
        enabled: true

- name: bulk enable extra services
  hosts: crib
  become: yes
  tasks:
    - name: bulk enable extra services
      systemd_service:
        name: "{{ item }}"
        state: started
        enabled: true
      with_items:
        - gpm
        - qbittorrent-nox@mss.service
        - vnstat

    - name: enable but do not start module cleanup
      systemd_service:
        name: linux-modules-cleanup
        enabled: true
